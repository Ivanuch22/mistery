import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import Questions from "src/components/questions";
import ImageModal from "src/components/modalImg";
import { Link as ScrollLink } from "react-scroll";

interface InputData {
  type: {
    value: string;
    isValid: boolean;
    errorMessage: string;
  };
  text: {
    value: string;
    isValid: boolean;
    errorMessage: string;
  };
  photos: {
    value: string;
    isValid: boolean;
    errorMessage: string;
  };
  phone: {
    value: string;
    isValid: boolean;
    errorMessage: string;
  };
  comment: {
    value: string;
    isValid: boolean;
    errorMessage: string;
  };
  box: {
    value: string;
    isValid: boolean;
    errorMessage: string;
    data: any;
  };
}

const CustomPage = () => {
  const [basketBox, setBasketBox] = useState([]);
  const [typeOfCups, setTypeOfCups] = useState([]);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedImageUrl, setSelectedImageUrl] = useState("");

  const [file, setFile] = useState<any>([]);
  const [inputData, setInputData] = useState<InputData>({
    type: {
      value: "",
      isValid: true,
      errorMessage: "",
    },
    text: {
      value: "",
      isValid: true,
      errorMessage: "",
    },
    phone: {
      value: "",
      isValid: true,
      errorMessage: "",
    },
    photos: {
      value: "",
      isValid: true,
      errorMessage: "",
    },
    comment: {
      value: "",
      isValid: true,
      errorMessage: "",
    },
    box: {
      value: "",
      isValid: true,
      errorMessage: "",
      data: {
        name: "",
        price: 0,
        img: "",
      },
    },
  });

  useEffect(() => {
    fetch(`${process.env.PUBLIC_URL}/data/basket.json`)
      .then((response) => response.json())
      .then((data) => setBasketBox(data))
      .catch(() => console.log("basket not find"));

    fetch(`${process.env.PUBLIC_URL}/data/typeOfCups.json`)
      .then((response) => response.json())
      .then((data) => setTypeOfCups(data))
      .catch(() => console.log("type not find"));
  }, []);
  useEffect(() => console.log(inputData), [inputData]);

  const handleFileChange = (event: any) => {
    console.log(event.target.files);
    setFile(event.target.files);
  };
  const handleImageClick = (imageUrl: string) => {
    setSelectedImageUrl(imageUrl);
    setIsModalOpen(true);
  };
  const closeModal = () => {
    setIsModalOpen(false);
  };

  const onChangeInput = (event: any, element: any = null) => {
    let { name, value, files } = event.target;
    let isValid = true;
    let errorMessage = "";
    switch (name) {
      case "text":
        value.length > 0 ? (isValid = true) : (isValid = false);
        errorMessage = isValid ? "" : "–í–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç";
        break;
      case "phone":
        value = handleInputChange(value);
        value.length === 13 ? (isValid = true) : (isValid = false);
        errorMessage = isValid ? "" : "–í–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É";
        break;
      case "box":
        event.target.checked
          ? (event.target.checked = true)
          : (event.target.checked = false);
        break;
      case "file":
        const fileNames = Array.from(Object.values(files)).map(
          (file: any) => file.name
        );
        value = fileNames.join(", ");
        break;
      default:
        break;
    }
    if (name === "box") {
      console.log("sdaklf");
      setInputData((prevData: any) => ({
        ...prevData,
        [name]: {
          value,
          isValid,
          errorMessage,
          data: element,
        },
      }));
      return;
    }
    setInputData((prevData: any) => ({
      ...prevData,
      [name]: {
        value,
        isValid,
        errorMessage,
      },
    }));
  };

  const handleInputChange = (value: string) => {
    let formattedInput = value.trim();
    if (formattedInput.startsWith("0")) {
      formattedInput = `+38${formattedInput}`;
    } else if (formattedInput.startsWith("380")) {
      formattedInput = `+${formattedInput}`;
    } else if (formattedInput.startsWith("+")) {
    } else {
    }
    return formattedInput;
  };

  const onSubmitForm = async (event: any) => {
    event.preventDefault();
    let areAllInputsValid = false;

    const checkData = async () => {
      !(inputData.type.value.length > 0)
        ? setInputData((prevData: any) => ({
            ...prevData,
            type: { ...prevData.type, isValid: false },
          }))
        : setInputData((prevData: any) => ({
            ...prevData,
            type: { ...prevData.type, isValid: true },
          }));
      !(inputData.text.value.length > 0)
        ? setInputData((prevData: any) => ({
            ...prevData,
            text: { ...prevData.text, isValid: false },
          }))
        : setInputData((prevData: any) => ({
            ...prevData,
            text: { ...prevData.text, isValid: true },
          }));

      !(inputData.photos.value.length > 0)
        ? setInputData((prevData: any) => ({
            ...prevData,
            photos: { ...prevData.photos, isValid: false },
          }))
        : setInputData((prevData: any) => ({
            ...prevData,
            photos: { ...prevData.photos, isValid: true },
          }));

      !(inputData.phone.value.length === 13)
        ? setInputData((prevData: any) => ({
            ...prevData,
            phone: { ...prevData.phone, isValid: false },
          }))
        : setInputData((prevData: any) => ({
            ...prevData,
            phone: { ...prevData.phone, isValid: true },
          }));

      const check = Object.values(inputData).some(
        (field: any) => field.value.length > 0
      );
      if (check) {
        areAllInputsValid = await Object.values(inputData).every(
          (field: any) => field.isValid
        );
      }
      console.log(check);
    };
    const sendDataToTelegram = async () => {
      const TOKEN = "6619280299:AAGIL6f6uD5nOU1Sjw26zzqvyI0V_fZZKq0";
      const CHAT_ID = "-1002007095666";
      const URL_API = `https://api.telegram.org/bot${TOKEN}`;

      const packing = () => {
        let message = `<b>–£–Ω—ñ–∫–∞–ª—å–Ω–∞ —á–∞—à–∫–∞üòÅ</b>

–¢–∏–ø —á–∞—à–∫–∏:
${inputData.type.value}
–¢–µ–∫—Å—Ç: 
${inputData.text.value}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: 
${inputData.text.value}
–ö–æ–º–µ–Ω—Ç–∞—Ä:
${inputData.comment.value.length > 0 ? inputData.comment.value : "–ù—î–º–∞ üòî"}
–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–æ–∫—Å:
${inputData.box.value.length > 0 ? inputData.box.value : "–ù—î–º–∞ üòî"}
        `;
        return message;
      };

      const sendingImages = () => {
        const formData = new FormData();
        formData.append("chat_id", CHAT_ID);
        formData.append("photo", file[0]);
        formData.append("caption", packing());

        fetch(`${URL_API}/sendPhoto`, {
          method: "POST",
          body: formData,
        }).then((respose) =>
          respose.ok ? console.log("—É—Ä–∞") : console.log("o now")
        );
      };
      try {
        await sendingImages();
      } catch {
        console.log("sd");
      }
    };

    const sendMessageToBackEnd = () => {
      let filterCarts: any = [
        {
          price: 1,
          quantity: 1,
          name: inputData.text.value,
          picture: "",
          properties: [
            {
              name: "–¢–∏–ø —á–∞—à–∫–∏",
              value: inputData.type,
            },
          ],
        },
      ];
      inputData.box.data.name.length > 0
        ? filterCarts.push({
            price: inputData.box.data.price,
            quantity: 1,
            name: inputData.box.data.name,
            picture: inputData.box.data.img,
          })
        : console.log("ho chose box");
      const dataForBack = {
        source_id: 2,
        client_comment: inputData.comment.value,
        buyer: {
          full_name: `–ù–µ –∑–Ω–∞—é`,
          phone: `${inputData.phone.value}`,
        },
        shipping: {
          shipping_address_city: `–ù–µ –≤–∫–∞–∑–∞–Ω–æ`,
          shipping_address_region: `–ù–µ –≤–∫–∞–∑–∞–Ω–æ`,
        },
        products: filterCarts,
      };

      fetch(
        `https://dry-wildwood-96930-d95ea0cd167f.herokuapp.com/send-to-keycrm`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
          body: JSON.stringify(dataForBack),
        }
      )
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => console.log(data))
        .catch((error) => console.error("Error:", error));
    };

    await checkData();
    if (areAllInputsValid) {
      sendDataToTelegram();
      sendMessageToBackEnd();
    }
  };

  return (
    <>
      <ImageModal
        isOpen={isModalOpen}
        closeModal={closeModal}
        imageUrl={selectedImageUrl}
      />
      <section
        className="customFirstSection"
        style={{
          backgroundImage: `url(${process.env.PUBLIC_URL}/img/customBg.png)`,
        }}
      >
        <div className="customFirstSection_wrapper">
          <div className="container">
            <h2 className="customFirstSection_title title">
              –°—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω—É —á–∞—à–∫—É!
            </h2>
            <p className="customFirstSection_description">
              –•–æ—á–µ—à –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ –µ–º–æ—Ü—ñ—ó –¥–ª—è —Å–≤–æ—ó—Ö —Ä—ñ–¥–Ω–∏—Ö —ñ –±–ª–∏–∑—å–∫–∏—Ö?
              –ö–∞—Å—Ç–æ–º—ñ–∑—É–π —á–∞—à–∫—É, –¥–æ–¥–∞–π —Å–≤—ñ–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏, —è–∫—ñ —Ö–æ—á–µ—à –Ω–∞–Ω–µ—Å—Ç–∏
              –Ω–∞ —á–∞—à–∫—É. –ö—Ä–∞—â–æ–≥–æ –ø–æ–¥–∞—Ä—É–Ω–∫—É –ø—Ä–æ—Å—Ç–æ –Ω–µ —ñ—Å–Ω—É—î!
            </p>
            <ScrollLink
              to="yourElement"
              spy={true}
              smooth={true}
              duration={500}
            >
              <button className="customFirstSection_button firstSection__button">
                –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—é —á–∞—à–∫—É
              </button>
            </ScrollLink>
          </div>
        </div>
      </section>
      <section className="secondSection">
        <div className="container">
          <h2 className="secondSection_title title">
            –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É —á–∞—à–∫—É –∑—ñ —Å–≤–æ—ó–º –¥–∏–∑–∞–π–Ω–æ–º?
          </h2>
          <div className="secondSection_row">
            <article className="secondSection_block">
              <h3 className="secondSection_block_title">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ</h3>
              <p className="secondSection_block_description">
                –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –∫–∞—Ä—Ç–∏–Ω–∫—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–∞ —á–∞—à–∫—É.
              </p>
            </article>
            <article className="secondSection_block">
              <h3 className="secondSection_block_title">–î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç</h3>
              <p className="secondSection_block_description">
                –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –¥–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–∞ —á–∞—à–∫—É.
              </p>
            </article>
            <article className="secondSection_block">
              <h3 className="secondSection_block_title">–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—à–∫—É</h3>
              <p className="secondSection_block_description">
                –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —á–∞—à–∫–∏, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –Ω–∞–Ω–µ—Å—Ç–∏ —Å–≤—ñ–π –¥–∏–∑–∞–π–Ω (–•–∞–º–µ–ª–µ–æ–Ω,
                Full Black, –ë—ñ–ª–∞, –ë—ñ–ª–∞ 425–º–ª, –ë–æ–∫–∞–ª 500 –º–ª, –ë–æ–∫–∞–ª 625–º–ª).
              </p>
            </article>
            <article className="secondSection_block">
              <h3 className="secondSection_block_title">–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è</h3>
              <p className="secondSection_block_description">
                –£–∑–≥–æ–¥—å—Ç–µ –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–∏–∑–∞–π–Ω, —Ü—ñ–Ω—É –∞ —Ç–∞–∫–æ–∂ —ñ–Ω—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è
                —â–æ–¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
              </p>
            </article>
            <article className="secondSection_block">
              <h3 className="secondSection_block_title">–û–ø–ª–∞—Ç–∞</h3>
              <p className="secondSection_block_description">
                –ü—ñ—Å–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è, –æ–ø–ª–∞—Ç—ñ—Ç—å —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º–∏
                —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏, —â–æ–± –≤–æ–Ω–æ –±—É–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ä–æ–±–æ—Ç—É.
              </p>
            </article>
            <article className="secondSection_block">
              <h3 className="secondSection_block_title">
                –û—Ç—Ä–∏–º–∞–π—Ç–µ —Å–≤–æ—é —á–∞—à–∫—É
              </h3>
              <p className="secondSection_block_description">
                –û—Ç—Ä–∏–º–∞–π—Ç–µ —Å–≤–æ—é —á–∞—à–∫—É –ø—Ä–æ—Ç—è–≥–æ–º 1-3 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–æ–º—É
                –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ –Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏!
              </p>
            </article>
          </div>
        </div>
      </section>
      <form
        name="yourElement"
        className="customForm"
        encType="multipart/form-data"
        method="post"
        action="/upload"
      >
        <div className="container">
          <h2 className="customForm_title title">
            –°—Ç–≤–æ—Ä–∏ —Å–≤–æ—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —á–∞—à–∫—É!
          </h2>
          <article className="customForm_column">
            <h3 className="customForm_name">–¢–∏–ø —á–∞—à–∫–∏:</h3>
            <div
              className="customForm_row"
              style={
                inputData.type.isValid
                  ? { border: "none" }
                  : {
                      border: "3px solid red",
                      borderRadius: "10px",
                      padding: "10px",
                    }
              }
            >
              {typeOfCups.map((element: any, index: any) => {
                return (
                  <article key={index + 10}>
                    <input
                      id={`${element.name} ${index}`}
                      className="drawer__box-checkbox"
                      type="radio"
                      name="type"
                      value={element.name}
                      onClick={onChangeInput}
                    />
                    <label
                      htmlFor={`${element.name} ${index}`}
                      className="drawer__box"
                    >
                      <img
                        width="200px"
                        height="200px"
                        decoding="async"
                        alt="img"
                        src={`${process.env.PUBLIC_URL}/img/${element.img}`}
                        className="drawer__box-img"
                      />
                      <h5 className="drawer__box-title">{element.name}</h5>
                    </label>
                  </article>
                );
              })}
            </div>
          </article>
          <article className="customForm_column">
            <h3 className="customForm_name">–¢–µ–∫—Å—Ç:</h3>
            <input
              className="drawer__input"
              name="text"
              onChange={onChangeInput}
              style={{
                borderColor: inputData.text.isValid ? "#444ad3" : "red",
              }}
              type="text"
              placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–∞ —á–∞—à–∫—É"
            />
          </article>
          <article className="customForm_column">
            <h3 className="customForm_name">–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ:</h3>
            <p className="customForm_description">
              –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–∞ —á–∞—à–∫—É
            </p>
            <div>
              {Object.values(file).map((file: any, index: number) => (
                <div
                  id="fileName"
                  className="customForm_addedFile"
                  key={index + 30}
                >
                  {file.name}
                </div>
              ))}
            </div>

            <input
              accept="image/png, image/jpeg"
              onChange={(e: any) => {
                handleFileChange(e);
                onChangeInput(e);
              }}
              id="fileInput"
              className="customForm_input"
              type="file"
              name="photos"
            />
            <label
              htmlFor="fileInput"
              style={
                inputData.photos.isValid ? {} : { border: "3px solid red" }
              }
              className="firstSection__button customForm_column_button"
            >
              –∑–∞–≤–∞—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ
            </label>
          </article>
          <article className="customForm_column">
            <h3 className="customForm_name">–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</h3>
            <input
              className="drawer__input"
              type="text"
              name="phone"
              value={inputData.phone.value}
              style={{
                borderColor: inputData.phone.isValid ? "#444ad3" : "red",
              }}
              maxLength={13}
              onChange={onChangeInput}
              placeholder="+38 (___) ___-__-__"
            />
          </article>
          <article className="customForm_column">
            <h3 className="customForm_name">–ö–æ–º–µ–Ω—Ç–∞—Ä:</h3>
            <input
              className="drawer__input"
              type="text"
              name="comment"
              value={inputData.comment.value}
              onChange={onChangeInput}
              placeholder="–ó–∞–ª–∏—à—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            />
          </article>
          <article className="customForm_column">
            <h3 className="customForm_name"> –î–æ–¥–∞–π –±–æ–∫—Å –¥–ª—è –≤–∞—É –µ—Ñ–µ–∫—Ç—É! ‚ú®</h3>
            <div className="customForm_row">
              {basketBox.map((element: any, index: any) => {
                return (
                  <article key={index + 20}>
                    <input
                      id={`${element.name} ${index}`}
                      className="drawer__box-checkbox"
                      type="radio"
                      name="box"
                      onChange={(e) => onChangeInput(e, element)}
                      value={element.name}
                    />
                    <label
                      // onClick={() => setBoxsPriceBasket(element.price)}
                      htmlFor={`${element.name} ${index}`}
                      className="drawer__box"
                    >
                      <img
                        width="200px"
                        height="200px"
                        decoding="async"
                        alt="img"
                        src={`${process.env.PUBLIC_URL}/img/${element.img}`}
                        className="drawer__box-img"
                      />
                      <h5 className="drawer__box-title">{element.name}</h5>
                    </label>
                  </article>
                );
              })}
            </div>
          </article>
          <button
            className="customForm_order_button firstSection__button"
            type="submit"
            onClick={onSubmitForm}
          >
            –î—ñ–∑–Ω–∞—Ç–∏—Å—å —Ü—ñ–Ω—É
          </button>
        </div>
        <footer className="customFooter">
          –ù–∞—Ç–∏—Å–∫–∞—é—á–∏ –∫–Ω–æ–ø–∫—É, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑
          <Link
            aria-label="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–ª—ñ—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ"
            to={"/privacy-policy"}
          >
            {" "}
            –ü–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
          </Link>{" "}
          —Ç–∞
          <Link
            aria-label="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –¥–æ–≥–æ–≤–æ—Ä—É –ø—É–±–ª—ñ—á–Ω–æ—ó –æ—Ñ–µ—Ä—Ç–∏"
            to={"/oferta"}
          >
            {" "}
            –î–æ–≥–æ–≤–æ—Ä–æ–º –ø—É–±–ª—ñ—á–Ω–æ—ó –æ—Ñ–µ—Ä—Ç–∏
          </Link>
        </footer>
      </form>
      <section className="customOrdered">
        <h2 className="customOrdered_title title">
          –ö–∞—Å—Ç–æ–º–Ω—ñ —á–∞—à–∫–∏, —è–∫—ñ –≤–∂–µ –≤ –Ω–∞—Å –∑–∞–º–æ–≤–ª—è–ª–∏ –ø–æ–∫—É–ø—Ü—ñ
        </h2>
        <article
          onClick={() =>
            handleImageClick(`${process.env.PUBLIC_URL}/img/carts/11159703.jpg`)
          }
          className="customOrdered_cart"
        >
          <img
            width="200px"
            height="200px"
            decoding="async"
            alt="img"
            className="customOrdered_cart_img"
            src={`${process.env.PUBLIC_URL}/img/carts/11159703.jpg`}
          />
        </article>
        <article
          onClick={() =>
            handleImageClick(`${process.env.PUBLIC_URL}/img/carts/11159703.jpg`)
          }
          className="customOrdered_cart"
        >
          <img
            width="200px"
            height="200px"
            decoding="async"
            alt="img"
            className="customOrdered_cart_img"
            src={`${process.env.PUBLIC_URL}/img/carts/11159703.jpg`}
          />
        </article>
      </section>
      <Questions />
    </>
  );
};
export default CustomPage;
